From 96acc6773b38264b28cfb4c72a00343e001d547d Mon Sep 17 00:00:00 2001
From: danfunk <daniel.h.funk@gmail.com>
Date: Tue, 12 Dec 2023 17:53:11 -0500
Subject: [PATCH 1/4] wip

---
 .../src/spiffworkflow_backend/api.yml         |  36 +++-
 .../models/reference_cache.py                 |   1 +
 .../routes/messages_controller.py             |  35 +++-
 .../services/data_setup_service.py            |  11 ++
 .../unit/test_data_setup_service.py           |  24 ++-
 .../messages/MessageInstanceList.tsx          |   1 -
 .../src/components/messages/MessageModal.tsx  | 155 ++++++++++++++++++
 .../components/messages/MessageModelList.tsx  |  81 ++++-----
 spiffworkflow-frontend/src/index.css          |   8 +
 9 files changed, 297 insertions(+), 55 deletions(-)
 create mode 100644 spiffworkflow-frontend/src/components/messages/MessageModal.tsx

diff --git a/spiffworkflow-backend/src/spiffworkflow_backend/api.yml b/spiffworkflow-backend/src/spiffworkflow_backend/api.yml
index d8e4ab13..c6788b37 100755
--- a/spiffworkflow-backend/src/spiffworkflow_backend/api.yml
+++ b/spiffworkflow-backend/src/spiffworkflow_backend/api.yml
@@ -2395,6 +2395,7 @@ paths:
             application/json:
               schema:
                 $ref: "#/components/schemas/Workflow"
+
   /message-models:
     parameters:
       - name: page
@@ -2417,7 +2418,7 @@ paths:
           type: string
     get:
         tags:
-            - Message Models
+            - Messages
         operationId: spiffworkflow_backend.routes.messages_controller.message_model_list
         summary: Get a list of message models
         responses:
@@ -2428,7 +2429,38 @@ paths:
                   schema:
                     $ref: "#/components/schemas/Workflow"
 
-
+  /correlation-keys:
+    parameters:
+      - name: page
+        in: query
+        required: false
+        description: The page number to return. Defaults to page 1.
+        schema:
+          type: integer
+      - name: per_page
+        in: query
+        required: false
+        description: The number of correlations to show per page. Defaults to page 10.
+        schema:
+          type: integer
+      - name: relative_location
+        in: query
+        required: false
+        description: The location of the correlation key relative to the root of the project, defaults to /
+        schema:
+          type: string
+    get:
+        tags:
+            - Messages
+        operationId: spiffworkflow_backend.routes.messages_controller.correlation_key_list
+        summary: Get a list of correlation_keys
+        responses:
+          "200":
+            description: A list of correlation_keys
+            content:
+                application/json:
+                  schema:
+                    $ref: "#/components/schemas/Workflow"
 
   /messages:
     parameters:
diff --git a/spiffworkflow-backend/src/spiffworkflow_backend/models/reference_cache.py b/spiffworkflow-backend/src/spiffworkflow_backend/models/reference_cache.py
index b5ed6ec7..574b045e 100644
--- a/spiffworkflow-backend/src/spiffworkflow_backend/models/reference_cache.py
+++ b/spiffworkflow-backend/src/spiffworkflow_backend/models/reference_cache.py
@@ -25,6 +25,7 @@ class ReferenceType(SpiffEnum):
     process = "process"
     data_store = "data_store"
     message = "message"
+    correlation_key = "correlation_key"
 
 
 # SpecReference
diff --git a/spiffworkflow-backend/src/spiffworkflow_backend/routes/messages_controller.py b/spiffworkflow-backend/src/spiffworkflow_backend/routes/messages_controller.py
index f5fb4e77..9c2c24e7 100644
--- a/spiffworkflow-backend/src/spiffworkflow_backend/routes/messages_controller.py
+++ b/spiffworkflow-backend/src/spiffworkflow_backend/routes/messages_controller.py
@@ -13,18 +13,18 @@ from spiffworkflow_backend.exceptions.api_error import ApiError
 from spiffworkflow_backend.models.message_instance import MessageInstanceModel
 from spiffworkflow_backend.models.process_instance import ProcessInstanceModel
 from spiffworkflow_backend.models.process_instance import ProcessInstanceModelSchema
-from spiffworkflow_backend.models.reference_cache import ReferenceCacheModel, ReferenceSchema
+from spiffworkflow_backend.models.reference_cache import ReferenceCacheModel, ReferenceSchema, ReferenceType
 from spiffworkflow_backend.services.message_service import MessageService
 from spiffworkflow_backend.services.reference_cache_service import ReferenceCacheService
 
 
-def message_model_list(
+def reference_cache_list(
+        cache_type: str,
         relative_location: str | None = None,
         page: int = 1,
         per_page: int = 100,
 ) -> flask.wrappers.Response:
-
-    query = ReferenceCacheModel.basic_query().filter_by(type="message")
+    query = ReferenceCacheModel.basic_query().filter_by(type=cache_type)
     if relative_location:
         locations = ReferenceCacheService.upsearch_locations(relative_location)
         query = query.filter(ReferenceCacheModel.relative_location.in_(locations))
@@ -40,6 +40,33 @@ def message_model_list(
     }
     return make_response(jsonify(response_json), 200)
 
+
+def message_model_list(
+        relative_location: str | None = None,
+        page: int = 1,
+        per_page: int = 100,
+) -> flask.wrappers.Response:
+    return reference_cache_list(
+        cache_type=ReferenceType.message.value,
+        relative_location=relative_location,
+        page=page,
+        per_page=per_page,
+    )
+
+
+def correlation_key_list(
+        relative_location: str | None = None,
+        page: int = 1,
+        per_page: int = 100,
+) -> flask.wrappers.Response:
+    return reference_cache_list(
+        cache_type=ReferenceType.correlation_key.value,
+        relative_location=relative_location,
+        page=page,
+        per_page=per_page,
+    )
+
+
 def message_instance_list(
     process_instance_id: int | None = None,
     page: int = 1,
diff --git a/spiffworkflow-backend/src/spiffworkflow_backend/services/data_setup_service.py b/spiffworkflow-backend/src/spiffworkflow_backend/services/data_setup_service.py
index dfe253dd..4c7de042 100644
--- a/spiffworkflow-backend/src/spiffworkflow_backend/services/data_setup_service.py
+++ b/spiffworkflow-backend/src/spiffworkflow_backend/services/data_setup_service.py
@@ -70,6 +70,17 @@ class DataSetupService:
                         if "correlation_keys" in data:
                             for correlation_key in data["correlation_keys"]:
                                 correlation_keys[correlation_key["id"]] = correlation_key["correlation_properties"]
+                                reference_cache = ReferenceCacheModel.from_params(
+                                    correlation_key["id"],
+                                    correlation_key["id"],
+                                    ReferenceType.correlation_key.value,
+                                    '',
+                                    FileSystemService.relative_location(file),
+                                    correlation_key["correlation_properties"],
+                                    False,
+                                )
+                                ReferenceCacheService.add_unique_reference_cache_object(reference_objects,
+                                                                                        reference_cache)
 
                         for message in data["messages"]:
                             properties = []
diff --git a/spiffworkflow-backend/tests/spiffworkflow_backend/unit/test_data_setup_service.py b/spiffworkflow-backend/tests/spiffworkflow_backend/unit/test_data_setup_service.py
index 8f136e07..98a3ee8d 100644
--- a/spiffworkflow-backend/tests/spiffworkflow_backend/unit/test_data_setup_service.py
+++ b/spiffworkflow-backend/tests/spiffworkflow_backend/unit/test_data_setup_service.py
@@ -24,7 +24,7 @@ class TestDataSetupService(BaseTest):
         self.copy_example_process_models()
         DataSetupService.save_all_process_models()
         cache = ReferenceCacheModel.query.filter(ReferenceCacheModel.type == 'process').all()
-        assert(len(cache) == 2)
+        assert(len(cache) == 1)
 
     def test_data_setup_service_finds_messages(
         self,
@@ -55,14 +55,20 @@ class TestDataSetupService(BaseTest):
         assert message_map['basic_message'].relative_location == "1-basic-concepts"
         assert message_map['basic_message'].properties == {'correlation_keys': [], 'correlations': []}
 
-    def test_data_setup_service_finds_correlation_keys (
-            self,
-            app: Flask,
-            client: FlaskClient,
-            with_db_and_bpmn_file_cleanup: None,
+
+    def test_data_setup_service_finds_correlations(
+        self,
+        app: Flask,
+        client: FlaskClient,
+        with_db_and_bpmn_file_cleanup: None,
     ) -> None:
         self.copy_example_process_models()
         DataSetupService.save_all_process_models()
-        cache = ReferenceCacheModel.query.filter(ReferenceCacheModel.type == 'message').all()
-        assert (len(cache) == 3)
-        message_map = {c.identifier: c for c in cache}
+        cache = ReferenceCacheModel.query.filter(ReferenceCacheModel.type == 'correlation_key').all()
+        assert(len(cache) == 2)
+        correlation_map = {c.identifier: c for c in cache}
+        assert ("order" in correlation_map)
+        assert ("franchise" in correlation_map)
+        assert (correlation_map['order'].properties == ['table_number', 'franchise_id'])
+        assert (correlation_map['franchise'].properties == ['franchise_id'])
+
diff --git a/spiffworkflow-frontend/src/components/messages/MessageInstanceList.tsx b/spiffworkflow-frontend/src/components/messages/MessageInstanceList.tsx
index a0802f12..da54e530 100644
--- a/spiffworkflow-frontend/src/components/messages/MessageInstanceList.tsx
+++ b/spiffworkflow-frontend/src/components/messages/MessageInstanceList.tsx
@@ -181,7 +181,6 @@ export default function MessageInstanceList({ processInstanceId }: OwnProps) {
     return (
       <>
         {breadcrumbElement}
-        {correlationsDisplayModal()}
         <PaginationForTable
           page={page}
           perPage={perPage}
diff --git a/spiffworkflow-frontend/src/components/messages/MessageModal.tsx b/spiffworkflow-frontend/src/components/messages/MessageModal.tsx
new file mode 100644
index 00000000..c13f4716
--- /dev/null
+++ b/spiffworkflow-frontend/src/components/messages/MessageModal.tsx
@@ -0,0 +1,155 @@
+import {
+  Form,
+  Modal,
+  Stack,
+  TextInput,
+  Checkbox,
+  Select,
+  SelectItem,
+} from '@carbon/react';
+import { useEffect, useState } from 'react';
+import { ReferenceCache } from '../../interfaces';
+import HttpService from '../../services/HttpService';
+
+type OwnProps = {
+  messageModel: ReferenceCache;
+  open: boolean;
+  onClose: () => void;
+};
+
+export default function MessageModal({
+  messageModel,
+  open,
+  onClose,
+}: OwnProps) {
+  const updatedModel: ReferenceCache = { ...messageModel };
+  const [identifierInvalid, setIdentifierInvalid] = useState<boolean>(false);
+  const [showCorrelations, setShowCorrelations] = useState<boolean>(false);
+  const [correlationKeys, setCorrelationKeys] = useState<any>({ results: [] });
+  const [correlationKey, setCorrelationKey] = useState<ReferenceCache | null>(
+    null
+  );
+
+  setShowCorrelations(messageModel.properties.correlations.length > 0);
+
+  useEffect(() => {
+    let queryParamString = `per_page=100&page=1`;
+    queryParamString += `&relative_location=${messageModel.relative_location}`;
+
+    const updateKeys = (result: any) => {
+      setCorrelationKeys(result);
+      result.results.forEach((key: any) => {
+        console.log("Has Key?", key.identifier, messageModel.properties.correlation_keys);
+        if (messageModel.properties.correlation_keys.includes(key.identifier)) {
+          console.log("Huston we have a match", key);
+          setCorrelationKey(key);
+          setShowCorrelations(true);
+        }
+      });
+    };
+
+    HttpService.makeCallToBackend({
+      path: `/correlation-keys?${queryParamString}`,
+      successCallback: updateKeys,
+    });
+  }, [messageModel]);
+
+  const onMessageNameChange = (event: any) => {
+    updatedModel.identifier = event.target.value;
+    setIdentifierInvalid(
+      updatedModel.identifier.length < 3 ||
+        !/^[a-z0-9_]+$/.test(updatedModel.identifier)
+    );
+  };
+
+  const correlationKeyOptions = () => {
+    return correlationKeys.results.map((key: any) => {
+      return <SelectItem value={key.identifier} text={key.identifier} />;
+    });
+  };
+
+  const onCorrelationKeySelected = (event: any) => {
+    correlationKeys.results.forEach((key: any) => {
+      if (key.identifier === event.target.value) {
+        console.log('Key updated', key);
+        setCorrelationKey(key);
+      }
+    });
+  };
+
+  const retrievalExpressionFields = () => {
+    console.log('Correlation Key', correlationKey, showCorrelations);
+    if (correlationKey && showCorrelations) {
+      const fields = correlationKey.properties.map((prop: any) => {
+        const label = `Extraction Expression for ${prop}`;
+        return (
+          <TextInput
+            id={prop}
+            name={prop}
+            invalid={identifierInvalid}
+            labelText={label}
+            defaultValue={prop}
+//            onChange={}
+          />
+        );
+      });
+      return (
+        <div className={'retrievalExpressionsForm'}>
+          <h2>Retrieval Expressions:</h2>
+          The body of the message should be a JSON object that includes these properties.  The value
+          of each property will be extracted from the message and used to correlate the message to a
+          running process.
+          {fields}
+        </div>
+      )
+    }
+    return null;
+  };
+
+  const createMessageForm = () => {
+    return (
+      <Form onSubmit={onClose}>
+        <Stack gap={5}>
+          <TextInput
+            id="message_name"
+            name="message_name"
+            placeholder="food_is_ready"
+            invalidText='Minimum of 3 letters, please use only letters and underscores, ie "food_is_ready"'
+            invalid={identifierInvalid}
+            labelText="Message Name*"
+            defaultValue={updatedModel.identifier}
+            onChange={onMessageNameChange}
+          />
+          <Checkbox
+            id="show_correlations"
+            labelText="Correlate this message"
+            checked={showCorrelations}
+            helperText="Correlations are used to assure that messages are delivered only to those process
+            instances that are related. For example a process instance that prepares food for table 12 would
+            not receive a message about table 11, because it is CORRELATED to a specific table number."
+          />
+          <Select
+            id="correlation_key"
+            labelText="Select a correlation"
+            onChange={onCorrelationKeySelected}
+            visible={showCorrelations}
+          >
+            {correlationKeyOptions()}
+          </Select>
+          {retrievalExpressionFields()}
+        </Stack>
+      </Form>
+    );
+  };
+
+  return (
+    <Modal
+      open={open}
+      onRequestClose={onClose}
+      modalHeading={`${messageModel.identifier}`}
+      modalLabel="Details"
+    >
+      {createMessageForm()}
+    </Modal>
+  );
+}
diff --git a/spiffworkflow-frontend/src/components/messages/MessageModelList.tsx b/spiffworkflow-frontend/src/components/messages/MessageModelList.tsx
index a48c0259..424dbf10 100644
--- a/spiffworkflow-frontend/src/components/messages/MessageModelList.tsx
+++ b/spiffworkflow-frontend/src/components/messages/MessageModelList.tsx
@@ -1,16 +1,14 @@
-import { useEffect, useState } from 'react';
+import React, { useEffect, useState } from 'react';
 // @ts-ignore
 // @ts-ignore
-import { Table, Modal, Button } from '@carbon/react';
-import { Link, useSearchParams } from 'react-router-dom';
+import { Table, Button } from '@carbon/react';
+import { useSearchParams } from 'react-router-dom';
 import PaginationForTable from '../PaginationForTable';
 import ProcessBreadcrumb from '../ProcessBreadcrumb';
-import {
-  getPageInfoFromSearchParams,
-  modifyProcessIdentifierForPathParam,
-} from '../../helpers';
+import { getPageInfoFromSearchParams } from '../../helpers';
 import HttpService from '../../services/HttpService';
 import { ReferenceCache } from '../../interfaces';
+import MessageModal from './MessageModal';
 
 type OwnProps = {
   processGroupId?: string;
@@ -41,43 +39,40 @@ export default function MessageModelList({ processGroupId }: OwnProps) {
     });
   }, [processGroupId, searchParams]);
 
-  /*
-  const handleCorrelationDisplayClose = () => {
-    setMessageInstanceForModal(null);
+  const handleMessageEditClose = () => {
+    setMessageModelForModal(null);
   };
 
-  const correlationsDisplayModal = () => {
-    if (messageInstanceForModal) {
-      let failureCausePre = null;
-      if (messageInstanceForModal.failure_cause) {
-        failureCausePre = (
-          <>
-            <p className="failure-string">
-              {messageInstanceForModal.failure_cause}
-            </p>
-            <br />
-          </>
-        );
-      }
+  const messageEditModal = () => {
+    console.log('Message Model for Modal', messageModelForModal);
+    if (messageModelForModal) {
       return (
-        <Modal
-          open={!!messageInstanceForModal}
-          passiveModal
-          onRequestClose={handleCorrelationDisplayClose}
-          modalHeading={`Message ${messageInstanceForModal.id} (${messageInstanceForModal.name}) ${messageInstanceForModal.message_type} data:`}
-          modalLabel="Details"
-        >
-          {failureCausePre}
-          <p>Correlations:</p>
-          <pre>
-            {JSON.stringify(messageInstanceForModal.correlation_keys, null, 2)}
-          </pre>
-        </Modal>
+        <MessageModal
+          messageModel={messageModelForModal}
+          open={!!messageModelForModal}
+          onClose={handleMessageEditClose}
+        />
       );
     }
     return null;
   };
- */
+
+  const correlation = (row: ReferenceCache): string => {
+    let keys = '';
+    const cProps: string[] = [];
+    if ('correlation_keys' in row.properties) {
+      keys = row.properties.correlation_keys;
+    }
+    if ('correlations' in row.properties) {
+      row.properties.correlations.forEach((cor: any) => {
+        cProps.push(cor.correlation_property);
+      });
+    }
+    if (cProps.length > 0) {
+      keys += ` (${cProps.join(', ')})`;
+    }
+    return keys;
+  };
 
   const buildTable = () => {
     const rows = messageModels.map((row: ReferenceCache) => {
@@ -85,8 +80,15 @@ export default function MessageModelList({ processGroupId }: OwnProps) {
         <tr key={row.identifier}>
           <td>{row.identifier}</td>
           <td>{row.relative_location}</td>
+          <td>{correlation(row)}</td>
           <td>
-            <Button kind="ghost" className="button-link">
+            <Button
+              className="button-link"
+              kind="secondary"
+              style={{ width: '60px' }}
+              size="sm"
+              onClick={() => setMessageModelForModal(row)}
+            >
               Edit
             </Button>
           </td>
@@ -99,6 +101,7 @@ export default function MessageModelList({ processGroupId }: OwnProps) {
           <tr>
             <th>Id</th>
             <th>Location</th>
+            <th>Correlation</th>
             <th>Edit</th>
           </tr>
         </thead>
@@ -106,7 +109,6 @@ export default function MessageModelList({ processGroupId }: OwnProps) {
       </Table>
     );
   };
-
   if (pagination) {
     const { page, perPage } = getPageInfoFromSearchParams(searchParams);
     let breadcrumbElement = null;
@@ -133,6 +135,7 @@ export default function MessageModelList({ processGroupId }: OwnProps) {
     }
     return (
       <>
+        {messageEditModal()}
         {breadcrumbElement}
         <PaginationForTable
           page={page}
diff --git a/spiffworkflow-frontend/src/index.css b/spiffworkflow-frontend/src/index.css
index f6950943..bba23f9e 100644
--- a/spiffworkflow-frontend/src/index.css
+++ b/spiffworkflow-frontend/src/index.css
@@ -907,3 +907,11 @@ div.onboarding {
   float: right; /* Floats the keys to the right */
   text-align: right; /* Aligns text to the right within the container */
 }
+
+div.retrievalExpressionsForm {
+  border: 1px solid #999;
+  border-radius: 15px;
+  background: #ddd;
+  padding: 20px;
+  margin: 20px;
+}
-- 
2.25.1

